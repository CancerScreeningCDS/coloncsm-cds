{
  "resourceType": "Library",
  "id": "IncreasedRiskExclusionsActions",
  "contained": [ {
    "resourceType": "Parameters",
    "id": "options",
    "parameter": [ {
      "name": "translatorVersion",
      "valueString": "3.11.0"
    }, {
      "name": "option",
      "valueString": "EnableAnnotations"
    }, {
      "name": "option",
      "valueString": "EnableLocators"
    }, {
      "name": "option",
      "valueString": "DisableListDemotion"
    }, {
      "name": "option",
      "valueString": "DisableListPromotion"
    }, {
      "name": "format",
      "valueString": "XML"
    }, {
      "name": "format",
      "valueString": "JSON"
    }, {
      "name": "analyzeDataRequirements",
      "valueBoolean": true
    }, {
      "name": "collapseDataRequirements",
      "valueBoolean": true
    }, {
      "name": "compatibilityLevel",
      "valueString": "1.5"
    }, {
      "name": "enableCqlOnly",
      "valueBoolean": false
    }, {
      "name": "errorLevel",
      "valueString": "Error"
    }, {
      "name": "signatureLevel",
      "valueString": "Overloads"
    }, {
      "name": "validateUnits",
      "valueBoolean": false
    }, {
      "name": "verifyOnly",
      "valueBoolean": true
    } ]
  } ],
  "extension": [ {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-cqlOptions",
    "valueReference": {
      "reference": "#options"
    }
  }, {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://cancerscreeningcds.github.io/crcsm-cds/Library/IncreasedRiskExclusionsActions",
  "version": "1.0.0",
  "name": "IncreasedRiskExclusionsActions",
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library DataElements",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/Library/DataElements|1.0.0"
  }, {
    "type": "depends-on",
    "display": "Code system ActCode",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/CodeSystem/plan-definition-action-code-system"
  }, {
    "type": "depends-on",
    "display": "Code system ReasonCode",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/CodeSystem/plan-definition-action-reason-code-system"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "act-CRCHereditarySyndrome",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Resource"
  }, {
    "name": "act-IBD",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Resource"
  }, {
    "name": "act-HxCRC",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Resource"
  }, {
    "name": "act-FamilyHxCRC",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Resource"
  }, {
    "name": "act-HxPolyps",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Resource"
  }, {
    "name": "act-AvgRiskScreeningEligible",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Resource"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBJbmNyZWFzZWRSaXNrRXhjbHVzaW9uc0FjdGlvbnMgdmVyc2lvbiAnMS4wLjAnDQoNCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnDQppbmNsdWRlIEZISVJIZWxwZXJzICB2ZXJzaW9uICc0LjAuMScgY2FsbGVkIEZISVJIZWxwZXJzDQoNCmluY2x1ZGUgRGF0YUVsZW1lbnRzIHZlcnNpb24gJzEuMC4wJyBjYWxsZWQgRGF0YUVsZW1lbnRzDQoNCmNvZGVzeXN0ZW0gIkFjdENvZGUiOiAnaHR0cDovL2NhbmNlcnNjcmVlbmluZ2Nkcy5naXRodWIuaW8vY3Jjc20tY2RzL0NvZGVTeXN0ZW0vcGxhbi1kZWZpbml0aW9uLWFjdGlvbi1jb2RlLXN5c3RlbScNCmNvZGVzeXN0ZW0gIlJlYXNvbkNvZGUiOiAnaHR0cDovL2NhbmNlcnNjcmVlbmluZ2Nkcy5naXRodWIuaW8vY3Jjc20tY2RzL0NvZGVTeXN0ZW0vcGxhbi1kZWZpbml0aW9uLWFjdGlvbi1yZWFzb24tY29kZS1zeXN0ZW0nDQoNCi8vIEFjdCBDb2Rlcw0KY29kZSAiU2VlICdIZXJlZGl0YXJ5IFN5bmRyb21lcycgbG9naWMgcGF0aCI6ICdzZWVoZXJlZGl0YXJ5c3luZHJvbWVzcGF0aCcgZnJvbSAiQWN0Q29kZSIgZGlzcGxheSAnU2VlIEhlcmVkaXRhcnkgU3luZHJvbWVzIGxvZ2ljIHBhdGgnDQpjb2RlICJTZWUgJ0luZmxhbW1hdG9yeSBCb3dlbCBEaXNlYXNlJyBsb2dpYyBwYXRoIjogJ3NlZWliZHBhdGgnIGZyb20gIkFjdENvZGUiIGRpc3BsYXkgJ1NlZSBJbmZsYW1tYXRvcnkgQm93ZWwgRGlzZWFzZSBsb2dpYyBwYXRoJw0KY29kZSAiU2VlICdQZXJzb25hbCBIaXN0b3J5IG9mIENvbG9yZWN0YWwgQ2FuY2VyJyBsb2dpYyBwYXRoIjogJ3NlZXBlcnNvbmFsaHhvZmNyY3BhdGgnIGZyb20gIkFjdENvZGUiIGRpc3BsYXkgJ1NlZSBQZXJzb25hbCBIaXN0b3J5IG9mIENvbG9yZWN0YWwgQ2FuY2VyIGxvZ2ljIHBhdGgnDQpjb2RlICJTZWUgJ0ZhbWlseSBIaXN0b3J5IG9mIENvbG9yZWN0YWwgQ2FuY2VyIG9yIEFkdmFuY2VkIFBvbHlwcycgbG9naWMgcGF0aCI6ICdzZWVmYW1pbHloeG9mY3JjcGF0aCcgZnJvbSAiQWN0Q29kZSIgZGlzcGxheSAnU2VlIEZhbWlseSBIaXN0b3J5IG9mIENvbG9yZWN0YWwgQ2FuY2VyIG9yIEFkdmFuY2VkIFBvbHlwcyBsb2dpYyBwYXRoJw0KY29kZSAiU2VlICdQZXJzb25hbCBIaXN0b3J5IG9mIFBvdGVudGlhbGx5IFByZWNhbmNlcm91cyBQb2x5cHMnIGxvZ2ljIHBhdGgiOiAnc2VlcGVyc29uYWxoeG9mcG9seXBzcGF0aCcgZnJvbSAiQWN0Q29kZSIgZGlzcGxheSAnU2VlIFBlcnNvbmFsIEhpc3Rvcnkgb2YgUG90ZW50aWFsbHkgUHJlY2FuY2Vyb3VzIFBvbHlwcyBsb2dpYyBwYXRoJw0KY29kZSAiU2VlICdBdmVyYWdlIFJpc2sgU2NyZWVuaW5nJyBsb2dpYyBwYXRoIjogJ3NlZWF2Z3Jpc2tzY3JlZW5pbmdwYXRoJyBmcm9tICJBY3RDb2RlIiBkaXNwbGF5ICdTZWUgQXZlcmFnZSBSaXNrIFNjcmVlbmluZyBsb2dpYyBwYXRoJw0KLy8gUmVhc29uIENvZGVzDQpjb2RlICJIZXJlZGl0YXJ5IHN5bmRyb21lIjogJ2hlcmVkaXRhcnlzeW5kcm9tZScgZnJvbSAiUmVhc29uQ29kZSIgZGlzcGxheSAnSGVyZWRpdGFyeSBzeW5kcm9tZScNCmNvZGUgIklCRCI6ICdpYmQnIGZyb20gIlJlYXNvbkNvZGUiIGRpc3BsYXkgJ0lCRCcNCmNvZGUgIkhpc3Rvcnkgb2YgQ1JDIjogJ2hpc3RvcnlvZmNyYycgZnJvbSAiUmVhc29uQ29kZSIgZGlzcGxheSAnSGlzdG9yeSBvZiBDUkMnDQpjb2RlICJGYW1pbHkgaGlzdG9yeSBvZiBDUkMgb3IgYWR2YW5jZWQgcG9seXBzIjogJ2ZhbWlseWhpc3RvcnlvZmNyYycgZnJvbSAiUmVhc29uQ29kZSIgZGlzcGxheSAnRmFtaWx5IGhpc3Rvcnkgb2YgQ1JDIG9yIGFkdmFuY2VkIHBvbHlwcycNCmNvZGUgIkhpc3Rvcnkgb2YgcG90ZW50aWFsbHkgcHJlY2FuY2Vyb3VzIHBvbHlwcyI6ICdoaXN0b3J5b2ZwcmVjYW5jZXJvdXNwb2x5cHMnIGZyb20gIlJlYXNvbkNvZGUiIGRpc3BsYXkgJ0hpc3Rvcnkgb2YgcG90ZW50aWFsbHkgcHJlY2FuY2Vyb3VzIHBvbHlwcycNCmNvZGUgIkF2ZXJhZ2UgcmlzayBzY3JlZW5pbmcgZWxpZ2libGUiOiAnYXZlcmFnZXJpc2tzY3JlZW5pbmdlbGlnaWJsZScgZnJvbSAiUmVhc29uQ29kZSIgZGlzcGxheSAnQXZlcmFnZSByaXNrIHNjcmVlbmluZyBlbGlnaWJsZScNCg0KY29udGV4dCBQYXRpZW50DQoNCmRlZmluZSAiYWN0LUNSQ0hlcmVkaXRhcnlTeW5kcm9tZSI6DQogIHsNCgljb2RlOiAiU2VlICdIZXJlZGl0YXJ5IFN5bmRyb21lcycgbG9naWMgcGF0aCIsDQogICAgcmVhc29uOiAiSGVyZWRpdGFyeSBzeW5kcm9tZSINCiAgfQ0KDQpkZWZpbmUgImFjdC1JQkQiOg0KICB7DQoJY29kZTogIlNlZSAnSW5mbGFtbWF0b3J5IEJvd2VsIERpc2Vhc2UnIGxvZ2ljIHBhdGgiLA0KICAgIHJlYXNvbjogIklCRCINCiAgfSANCg0KZGVmaW5lICJhY3QtSHhDUkMiOg0KICB7DQoJY29kZTogIlNlZSAnUGVyc29uYWwgSGlzdG9yeSBvZiBDb2xvcmVjdGFsIENhbmNlcicgbG9naWMgcGF0aCIsDQogICAgcmVhc29uOiAiSGlzdG9yeSBvZiBDUkMiDQogIH0gDQoNCmRlZmluZSAiYWN0LUZhbWlseUh4Q1JDIjoNCiAgew0KCWNvZGU6ICJTZWUgJ0ZhbWlseSBIaXN0b3J5IG9mIENvbG9yZWN0YWwgQ2FuY2VyIG9yIEFkdmFuY2VkIFBvbHlwcycgbG9naWMgcGF0aCIsDQogICAgcmVhc29uOiAiRmFtaWx5IGhpc3Rvcnkgb2YgQ1JDIG9yIGFkdmFuY2VkIHBvbHlwcyINCiAgfSANCg0KZGVmaW5lICJhY3QtSHhQb2x5cHMiOg0KICB7DQoJY29kZTogIlNlZSAnUGVyc29uYWwgSGlzdG9yeSBvZiBQb3RlbnRpYWxseSBQcmVjYW5jZXJvdXMgUG9seXBzJyBsb2dpYyBwYXRoIiwNCiAgICByZWFzb246ICJIaXN0b3J5IG9mIHBvdGVudGlhbGx5IHByZWNhbmNlcm91cyBwb2x5cHMiDQogIH0gDQoNCmRlZmluZSAiYWN0LUF2Z1Jpc2tTY3JlZW5pbmdFbGlnaWJsZSI6DQogIHsNCgljb2RlOiAiU2VlICdBdmVyYWdlIFJpc2sgU2NyZWVuaW5nJyBsb2dpYyBwYXRoIiwNCiAgICByZWFzb246ICJBdmVyYWdlIHJpc2sgc2NyZWVuaW5nIGVsaWdpYmxlIg0KICB9IA=="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}